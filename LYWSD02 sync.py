import asyncio
import struct
import time
from datetime import datetime
from bleak import BleakScanner, BleakClient
from bleak.exc import BleakError

TARGET_NAME = "LYWSD02"
CONNECTION_TIMEOUT = 30  # Ï¥à
DATA_READY_DELAY = 10    # Ïû•ÏπòÍ∞Ä Îç∞Ïù¥ÌÑ∞Î•º Ï§ÄÎπÑÌï† ÏãúÍ∞Ñ (Ï¥à)

# UUID Ï†ïÏùò
UUID_DATA = 'EBE0CCC1-7A0A-4B0C-8A1A-6FF2997DA3A6'
UUID_BATTERY = 'EBE0CCC4-7A0A-4B0C-8A1A-6FF2997DA3A6'
UUID_TIME = 'EBE0CCB7-7A0A-4B0C-8A1A-6FF2997DA3A6'


async def read_sensor_data(client: BleakClient):
    raw = await client.read_gatt_char(UUID_DATA)
    if len(raw) < 3:
        print(f"‚ö†Ô∏è ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå (Î∞õÏùÄ Í∏∏Ïù¥: {len(raw)} Î∞îÏù¥Ìä∏)")
        return

    temperature, humidity = struct.unpack_from('<hB', raw)
    temperature = temperature / 100

    battery_raw = await client.read_gatt_char(UUID_BATTERY)
    battery = battery_raw[0]

    print(f"üå°Ô∏è Ïò®ÎèÑ: {temperature}¬∞C")
    print(f"üíß ÏäµÎèÑ: {humidity}%")
    print(f"üîã Î∞∞ÌÑ∞Î¶¨: {battery}%")


async def set_device_time(client: BleakClient):
    now = int(datetime.now().timestamp())
    tz_offset = -time.timezone // 3600
    data = struct.pack('<Ib', now, tz_offset)
    await client.write_gatt_char(UUID_TIME, data, response=True)
    print(f"‚è±Ô∏è ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî ÏôÑÎ£å: {datetime.fromtimestamp(now)} (UTC{tz_offset:+})")


async def connect_and_process(address):
    async with BleakClient(address) as client:
        if not client.is_connected:
            print("‚ùå Ïó∞Í≤∞ Ïã§Ìå®")
            return
        print(f"‚úÖ Ïó∞Í≤∞ ÏÑ±Í≥µ: {address}")

        print(f"‚è≥ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ ÎåÄÍ∏∞ Ï§ë... ({DATA_READY_DELAY}Ï¥à)")
        await asyncio.sleep(DATA_READY_DELAY)

        await read_sensor_data(client)
        await set_device_time(client)


async def main():
    print(f"üîç BLE Ïû•Ïπò Ïä§Ï∫î Ï§ë... ({CONNECTION_TIMEOUT}Ï¥à)")
    devices = await BleakScanner.discover(timeout=CONNECTION_TIMEOUT)
    target_device = next((d for d in devices if d.name and TARGET_NAME in d.name), None)

    if not target_device:
        print(f"‚ùå '{TARGET_NAME}' Ïû•ÏπòÎ•º Ï∞æÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
        return

    print(f"üéØ ÎåÄÏÉÅ Ïû•Ïπò Î∞úÍ≤¨: {target_device.name} ({target_device.address})")

    try:
        await asyncio.wait_for(connect_and_process(target_device.address), timeout=CONNECTION_TIMEOUT)
    except asyncio.TimeoutError:
        print(f"‚è∞ Ïó∞Í≤∞ ÏãúÍ∞Ñ Ï¥àÍ≥º ({CONNECTION_TIMEOUT}Ï¥à)")
    except BleakError as e:
        print(f"‚ùå BLE Ïò§Î•ò: {e}")
    except Exception as e:
        print(f"‚ùå ÏòàÏô∏ Î∞úÏÉù: {e}")


if __name__ == "__main__":
    asyncio.run(main())
